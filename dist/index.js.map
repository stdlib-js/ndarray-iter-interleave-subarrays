{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndslice = require( '@stdlib/ndarray-base-slice' );\nvar maybeBroadcastArrays = require( '@stdlib/ndarray-maybe-broadcast-arrays' );\nvar nextCartesianIndex = require( '@stdlib/ndarray-base-next-cartesian-index' ).assign;\nvar args2multislice = require( '@stdlib/slice-base-args2multislice' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over interleaved subarrays.\n*\n* @param {ArrayLikeObject<ndarray>} arrays - input ndarrays\n* @param {PositiveInteger} ndims - number of dimensions to stack after broadcasting\n* @throws {TypeError} first argument must be an array of ndarrays\n* @throws {TypeError} each ndarray after broadcasting must have at least `ndims+1` dimensions\n* @throws {TypeError} second argument must be a positive integer\n* @throws {Error} input ndarrays must be broadcast-compatible\n* @returns {Iterator} iterator\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerInterleaveSubarrays( [ x, x ], 2 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* // ...\n*/\nfunction nditerInterleaveSubarrays( arrays, ndims ) {\n\tvar shape;\n\tvar iter;\n\tvar list;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar tmp;\n\tvar S;\n\tvar M;\n\tvar N;\n\tvar K;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isArrayLikeObject( arrays ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays. Value: `%s`.', arrays ) );\n\t}\n\tif ( !isPositiveInteger( ndims ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', ndims ) );\n\t}\n\t// Attempt to broadcast the input ndarrays...\n\ttry {\n\t\tlist = maybeBroadcastArrays( arrays );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays which are broadcast-compatible. Value: `%s`.', arrays ) );\n\t}\n\tK = list.length;\n\n\t// Retrieve input array meta data:\n\tshape = getShape( list[ 0 ] );\n\tM = shape.length;\n\n\t// Ensure that each broadcasted input array has sufficient dimensions...\n\tif ( M <= ndims ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays having at least %d dimensions after broadcasting.', ndims+1 ) );\n\t}\n\t// Check whether the broadcasted shape is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of subarrays across all stacks of subarrays:\n\tdim = M - ndims - 1;\n\tfor ( i = dim+1; i < M; i++ ) {\n\t\tN /= shape[ i ];\n\t}\n\tN *= K;\n\tS = shape[ dim ];\n\n\t// Initialize index arrays for generating slices...\n\tidx = [];\n\tfor ( i = 0; i < K; i++ ) {\n\t\ttmp = zeros( M );\n\n\t\t// Set the last `ndims` elements to `null` to indicate that we want a full \"slice\" for the last `ndims` dimensions:\n\t\tfor ( j = dim+1; j < M; j++ ) {\n\t\t\ttmp[ j ] = null;\n\t\t}\n\t\tidx.push( tmp );\n\t}\n\t// Initialize counters:\n\ti = -1;\n\tk = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar ibuf;\n\t\tvar s;\n\t\tvar j;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tk = ( k+1 ) % K;\n\t\tibuf = idx[ k ];\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( ibuf );\n\n\t\t// Update the index array:\n\t\tj = ( ibuf[ dim ] + 1 ) % S;\n\t\tibuf[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the subarrays in the current stack, move on to the next set of subarrays:\n\t\t\tibuf = nextCartesianIndex( shape, 'row-major', ibuf, dim-1, ibuf );\n\t\t}\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': ndslice( list[ k ], s, true, false ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerInterleaveSubarrays( arrays, ndims );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nditerInterleaveSubarrays;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iterates over interleaved subarrays.\n*\n* @module @stdlib/ndarray-iter-interleave-subarrays\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var nditerInterleaveSubarrays = require( '@stdlib/ndarray-iter-interleave-subarrays' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerInterleaveSubarrays( [ x, x ], 2 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAoB,QAAS,qCAAsC,EACnEC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAiB,QAAS,yBAA0B,EACpDC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAW,QAAS,uBAAwB,EAC5CC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAU,QAAS,4BAA6B,EAChDC,EAAuB,QAAS,wCAAyC,EACzEC,EAAqB,QAAS,2CAA4C,EAAE,OAC5EC,EAAkB,QAAS,oCAAqC,EAChEC,EAAS,QAAS,uBAAwB,EAuC9C,SAASC,EAA2BC,EAAQC,EAAQ,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAAC3B,EAAmBY,CAAO,EAC/B,MAAM,IAAI,UAAWF,EAAQ,8EAA+EE,CAAO,CAAE,EAEtH,GAAK,CAACX,EAAmBY,CAAM,EAC9B,MAAM,IAAI,UAAWH,EAAQ,6EAA8EG,CAAM,CAAE,EAGpH,GAAI,CACHG,EAAOT,EAAsBK,CAAO,CACrC,OAAUgB,EAAM,CACf,MAAM,IAAI,UAAWlB,EAAQ,6GAA8GE,CAAO,CAAE,CACrJ,CAQA,GAPAY,EAAIR,EAAK,OAGTF,EAAQV,EAAUY,EAAM,CAAE,CAAE,EAC5BM,EAAIR,EAAM,OAGLQ,GAAKT,EACT,MAAM,IAAI,UAAWH,EAAQ,kHAAmHG,EAAM,CAAE,CAAE,EAS3J,IANAU,EAAIlB,EAAOS,CAAM,EACZS,IAAM,IACVN,EAAM,IAGPE,EAAMG,EAAIT,EAAQ,EACZY,EAAIN,EAAI,EAAGM,EAAIH,EAAGG,IACvBF,GAAKT,EAAOW,CAAE,EAOf,IALAF,GAAKC,EACLH,EAAIP,EAAOK,CAAI,EAGfD,EAAM,CAAC,EACDO,EAAI,EAAGA,EAAID,EAAGC,IAAM,CAIzB,IAHAL,EAAMjB,EAAOmB,CAAE,EAGTI,EAAIP,EAAI,EAAGO,EAAIJ,EAAGI,IACvBN,EAAKM,CAAE,EAAI,KAEZR,EAAI,KAAME,CAAI,CACf,CAEA,OAAAK,EAAI,GACJE,EAAI,GAGJZ,EAAO,CAAC,EACRhB,EAAagB,EAAM,OAAQc,CAAK,EAChC9B,EAAagB,EAAM,SAAUe,CAAI,EAG5B5B,GACJH,EAAagB,EAAMb,EAAgB6B,CAAQ,EAErChB,EAQP,SAASc,GAAO,CACf,IAAIG,EACAC,EACAP,EAGJ,OADAD,GAAK,EACAR,GAAOQ,GAAKF,EACT,CACN,KAAQ,EACT,GAEDI,GAAMA,EAAE,GAAMH,EACdQ,EAAOd,EAAKS,CAAE,EAGdM,EAAIxB,EAAiBuB,CAAK,EAG1BN,GAAMM,EAAMb,CAAI,EAAI,GAAME,EAC1BW,EAAMb,CAAI,EAAIO,EACTA,IAAM,IAEVM,EAAOxB,EAAoBM,EAAO,YAAakB,EAAMb,EAAI,EAAGa,CAAK,GAG3D,CACN,MAAS1B,EAASU,EAAMW,CAAE,EAAGM,EAAG,GAAM,EAAM,EAC5C,KAAQ,EACT,EACD,CASA,SAASH,EAAKI,EAAQ,CAErB,OADAjB,EAAM,GACD,UAAU,OACP,CACN,MAASiB,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASH,GAAU,CAClB,OAAOpB,EAA2BC,EAAQC,CAAM,CACjD,CACD,CAKAf,EAAO,QAAUa,ICxKjB,IAAIwB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isArrayLikeObject", "isPositiveInteger", "iteratorSymbol", "zeros", "getShape", "numel", "ndslice", "maybeBroadcastArrays", "nextCartesianIndex", "args2multislice", "format", "nditerInterleaveSubarrays", "arrays", "ndims", "shape", "iter", "list", "FLG", "idx", "dim", "tmp", "S", "M", "N", "K", "i", "j", "k", "err", "next", "end", "factory", "ibuf", "s", "value", "main"]
}
