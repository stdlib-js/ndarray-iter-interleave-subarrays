{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport zeros from '@stdlib/array-base-zeros';\nimport getShape from '@stdlib/ndarray-shape';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ndslice from '@stdlib/ndarray-base-slice';\nimport maybeBroadcastArrays from '@stdlib/ndarray-maybe-broadcast-arrays';\nimport { assign as nextCartesianIndex } from '@stdlib/ndarray-base-next-cartesian-index';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over interleaved subarrays.\n*\n* @param {ArrayLikeObject<ndarray>} arrays - input ndarrays\n* @param {PositiveInteger} ndims - number of dimensions to stack after broadcasting\n* @throws {TypeError} first argument must be an array of ndarrays\n* @throws {TypeError} each ndarray after broadcasting must have at least `ndims+1` dimensions\n* @throws {TypeError} second argument must be a positive integer\n* @throws {Error} input ndarrays must be broadcast-compatible\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerInterleaveSubarrays( [ x, x ], 2 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* // ...\n*/\nfunction nditerInterleaveSubarrays( arrays, ndims ) {\n\tvar shape;\n\tvar iter;\n\tvar list;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar tmp;\n\tvar S;\n\tvar M;\n\tvar N;\n\tvar K;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isArrayLikeObject( arrays ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays. Value: `%s`.', arrays ) );\n\t}\n\tif ( !isPositiveInteger( ndims ) ) {\n\t\tthrow new TypeError( format( 'null45', ndims ) );\n\t}\n\t// Attempt to broadcast the input ndarrays...\n\ttry {\n\t\tlist = maybeBroadcastArrays( arrays );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays which are broadcast-compatible. Value: `%s`.', arrays ) );\n\t}\n\tK = list.length;\n\n\t// Retrieve input array meta data:\n\tshape = getShape( list[ 0 ] );\n\tM = shape.length;\n\n\t// Ensure that each broadcasted input array has sufficient dimensions...\n\tif ( M <= ndims ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of ndarrays having at least %d dimensions after broadcasting.', ndims+1 ) );\n\t}\n\t// Check whether the broadcasted shape is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of subarrays across all stacks of subarrays:\n\tdim = M - ndims - 1;\n\tfor ( i = dim+1; i < M; i++ ) {\n\t\tN /= shape[ i ];\n\t}\n\tN *= K;\n\tS = shape[ dim ];\n\n\t// Initialize index arrays for generating slices...\n\tidx = [];\n\tfor ( i = 0; i < K; i++ ) {\n\t\ttmp = zeros( M );\n\n\t\t// Set the last `ndims` elements to `null` to indicate that we want a full \"slice\" for the last `ndims` dimensions:\n\t\tfor ( j = dim+1; j < M; j++ ) {\n\t\t\ttmp[ j ] = null;\n\t\t}\n\t\tidx.push( tmp );\n\t}\n\t// Initialize counters:\n\ti = -1;\n\tk = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar ibuf;\n\t\tvar s;\n\t\tvar j;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tk = ( k+1 ) % K;\n\t\tibuf = idx[ k ];\n\n\t\t// Create a multi-slice for the current view:\n\t\ts = args2multislice( ibuf );\n\n\t\t// Update the index array:\n\t\tj = ( ibuf[ dim ] + 1 ) % S;\n\t\tibuf[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the subarrays in the current stack, move on to the next set of subarrays:\n\t\t\tibuf = nextCartesianIndex( shape, 'row-major', ibuf, dim-1, ibuf );\n\t\t}\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': ndslice( list[ k ], s, true, false ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerInterleaveSubarrays( arrays, ndims );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerInterleaveSubarrays;\n"],"names":["nditerInterleaveSubarrays","arrays","ndims","shape","iter","list","FLG","idx","dim","tmp","S","M","N","K","i","j","k","isArrayLikeObject","TypeError","format","isPositiveInteger","maybeBroadcastArrays","err","length","getShape","numel","zeros","push","setReadOnly","ibuf","s","done","args2multislice","nextCartesianIndex","value","ndslice","arguments","iteratorSymbol"],"mappings":";;8rCAwEA,SAASA,EAA2BC,EAAQC,GAC3C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAmBhB,GACxB,MAAM,IAAIiB,UAAWC,EAAQ,8EAA+ElB,IAE7G,IAAMmB,EAAmBlB,GACxB,MAAM,IAAIgB,UAAWC,EAAQ,SAAUjB,IAGxC,IACCG,EAAOgB,EAAsBpB,EAC7B,CAAC,MAAQqB,GACT,MAAM,IAAIJ,UAAWC,EAAQ,6GAA8GlB,GAC3I,CAQD,GAPAY,EAAIR,EAAKkB,QAITZ,GADAR,EAAQqB,EAAUnB,EAAM,KACdkB,SAGArB,EACT,MAAM,IAAIgB,UAAWC,EAAQ,kHAAmHjB,EAAM,IASvJ,IALW,KADXU,EAAIa,EAAOtB,MAEVG,GAAM,GAIDQ,GADNN,EAAMG,EAAIT,EAAQ,GACJ,EAAGY,EAAIH,EAAGG,IACvBF,GAAKT,EAAOW,GAOb,IALAF,GAAKC,EACLH,EAAIP,EAAOK,GAGXD,EAAM,GACAO,EAAI,EAAGA,EAAID,EAAGC,IAAM,CAIzB,IAHAL,EAAMiB,EAAOf,GAGPI,EAAIP,EAAI,EAAGO,EAAIJ,EAAGI,IACvBN,EAAKM,GAAM,KAEZR,EAAIoB,KAAMlB,EACV,CAcD,OAZAK,GAAK,EACLE,GAAK,EAILY,EADAxB,EAAO,CAAA,EACY,QAenB,WACC,IAAIyB,EACAC,EACAf,EAGJ,GADAD,GAAK,EACAR,GAAOQ,GAAKF,EAChB,MAAO,CACNmB,MAAQ,GAIVF,EAAOtB,EADPS,GAAMA,EAAE,GAAMH,GAIdiB,EAAIE,EAAiBH,GAGrBd,GAAMc,EAAMrB,GAAQ,GAAME,EAC1BmB,EAAMrB,GAAQO,EACH,IAANA,IAEJc,EAAOI,EAAoB9B,EAAO,YAAa0B,EAAMrB,EAAI,EAAGqB,IAG7D,MAAO,CACNK,MAASC,EAAS9B,EAAMW,GAAKc,GAAG,GAAM,GACtCC,MAAQ,EAET,IA3CDH,EAAaxB,EAAM,UAoDnB,SAAc8B,GAEb,GADA5B,GAAM,EACD8B,UAAUb,OACd,MAAO,CACNW,MAASA,EACTH,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA5DIM,GACJT,EAAaxB,EAAMiC,GAmEpB,WACC,OAAOrC,EAA2BC,EAAQC,EAC1C,IAnEME,CAoER"}